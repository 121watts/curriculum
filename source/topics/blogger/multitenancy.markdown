---
layout: page
title: Multitenancy
section: Blogger
---

Fundamentally, adding multitenancy to an application allows it to support multiple users and give them *each* the impression that they have a dedicated application.

To illustrate the process of adding multitenancy, let's work with Blogger.

### Setup

We'll start with the Blogger-Advanced project:

{% terminal %}
$ git clone git@github.com:JumpstartLab/blogger_advanced.git
$ cd blogger_advanced
$ bundle
$ rake db:migrate db:seed
{% endterminal %}

The seeds will generate 10 sample users, articles, and tags.

#### Login

For multi-tenancy to make sense you need a login/logout system to identify users. In this version of Blogger we've implemented a stand-in login system just to get you going.

Visit `http://localhost:3000/login` and click the Login button. You'll be logged
in as a random author from the 10 accounts generated by the seeds.

### Exploring Multi-tenancy

#### First Steps

* Login to the system
* You'll arrive at the `AccountController#show` page
* There are no articles associated with your account yet
* Visit `/articles/new` and create an article
* Return to `/account` and find that there *still* aren't any articles there
* Investigate the model relationships between `Article` and `Author`
* Modify the form for a new article so it embeds a hidden field with the current
author's ID and stores that into the `Article`
* View `/accounts` and confirm that the new article shows up
* Remove the hidden field from the form
* Build the `Article` instance off of the `current_author` in the controller
* Create another article
* Confirm that it shows up at `/account`

#### Intermediate

* Scope delete functionality so a user can only delete their own articles
* Scope edit functionality so a user can only edit/update their own articles

#### Challenging

* Add functionality such that a user can edit their own comment, but not comments
left by another user.
