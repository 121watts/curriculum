---
layout: page
title: Thursday, February 7th
---

## Daily Outline

* Project: Finishing EventReporter
* Project Evaluation: Peer Assessment
* Project Evaluation: Code Reviews & Peer Refactoring
* Lightning Talk: Check-Ins

## Finishing EventReporter

As you wrap things up, make sure you take one more look at how the code is going to actually be evaluated. You should know exactly how many points you'll earn even before you submit your solution.

### Maximizing Your Evaluation

Pull up the [EventReporter project description](http://tutorials.jumpstartlab.com/projects/event_reporter.html) and go down to the "Evaluation Criteria". Did you remember to audit your code style? 

### Submitting Your Work

This week we'll use a Git/Github workflow to submit your work. Please complete this step *well before 11AM* so we can start peer evaluations on time.

1. Visit the [submission page for this project](https://github.com/gSchool/submissions/blob/master/projects/event_reporter.markdown)
2. Edit the line with your name, adding the Git Read-Only URL for your project
3. Save and submit your pull request

Pull requests will then be merged, creating one master document with everyone's repo URLs.

## EventReporter: Peer Assessment

At 11AM we'll begin peer assessment. It is not acceptable to be looking at or working on your own code after 11:00:00.

### Data Collection

Visit [http://eval.jumpstartlab.com](http://eval.jumpstartlab.com) and begin the "Peer Evaluation for EventManager" evaluation.

### Protocol

Your goal is to determine three scores for your peer, defined by the Evaluation Criteria in [the project assignment](http://tutorials.jumpstartlab.com/projects/event_reporter.html).

#### Correctness

Use the five "Evaluations for Base Expectations" scripts to determine correctness. If their program deviates from the expected results/output, that script fails.

#### Style

Since this project is just one file, it's not too difficult to evaluate style manually. Scan through their file looking for (A) lines that are over 80 characters long or (B) methods which are 13 or more lines long. Then determine the score based on the number of style violations.

#### Effort

This section may take some interpretation. If all the stories passed in correctness, then they'll earn at least a three. If more than one story failed, you need to determine whether it was one incorrect feature that popped up in multiple stories, or multiple features that were missing/incorrect.

Then you need to evaluate the extensions. Use the "Evaluations for Extensions" at the bottom of the project assignment. If the output matches exactly, the story passes. If it deviates, the story fails and the extension is not credited.

### Peer Assignment

* Blair Anderson evaluates the project written by James Denman
* Paul Blackwell evaluates the project written by Geoffrey Schorkopf
* Erin Drummond evaluates the project written by Logan Sears
* James Denman evaluates the project written by Aimee Maher
* Jennifer Eliuk evaluates the project written by Blair Anderson
* Danny Garcia evaluates the project written by Shane Rogers
* Kareem Grant evaluates the project written by Raphael Weiner
* Christopher Knight evaluates the project written by Danny Garcia
* Chelsea Komlo evaluates the project written by Jorge Tellez
* John Maddux evaluates the project written by Laura Steadman
* Aimee Maher evaluates the project written by Erin Drummond
* Daniel Mee evaluates the project written by Jennifer Eliuk
* Ron Rateau evaluates the project written by Kyle Suss
* Shane Rogers evaluates the project written by Ron Rateau
* Laura Steadman evaluates the project written by Kareem Grant
* Geoffrey Schorkopf evaluates the project written by Bradley Sheehan
* Kyle Suss evaluates the project written by Elaine Tai
* Logan Sears evaluates the project written by Paul Blackwell
* Bradley Sheehan evaluates the project written by John Maddux
* Elaine Tai evaluates the project written by Christopher Knight
* Jorge Tellez evaluates the project written by Daniel Mee
* Raphael Weiner evaluates the project written by Chelsea Komlo

Skipped: Phil Battos, Josh Mejia

## Code Reviews

Each of you will meet with Steve, Katrina, or Jeff for a quick 1-on-1 code review. There is no evaluation/scoring associated with the code review, it is for your learning only. It is strongly recommended you *take notes yourself*.

### Groupings

Reviews will take place in order for each reviewer. Please stay in the upper floor work areas (classrooms, desks) until your review has taken place.

* With Steve
  * Jennifer Eliuk
  * Christopher Knight
  * Erin Drummond
  * James Denman
  * Bradley Sheehan
  * Jorge Tellez
  * Chelsea Komlo
  * Paul Blackwell
* With Katrina
  * Laura Steadman
  * John Maddux
  * Elaine Tai
  * Raphael Weiner
  * (Josh Mejia)
  * Geoffrey Schorkopf
  * Logan Sears
  * Danny Garcia
* With Jeff
  * Blair Anderson
  * Shane Rogers
  * Kareem Grant
  * Daniel Mee
  * Ron Rateau
  * Kyle Suss
  * (Phil Battos)
  * Aimee Maher

## Peer Refactoring

When you're *not* doing code review with an instructor, it's time to help your classmates. You will:

* Clone the repository of a peer
* Refactor their existing code based on what you've learned through the evaluation process
* Submit a pull request
* Add or finish extensions as time allows
* Submit a second pull request

### Protocol

1. Find the repository for the project you're working on
2. Fork it in the Github interface
3. Get the HTTPS URL for your new repository
4. In your terminal, switch to your projects directory and clone the new repo: `git clone https://github.com/yourusername/thereponame.git`
5. Switch into that directory and see how things are working
6. Make your suggested changes (*note*: it'd be a good idea to find the person who peer evaluated the project (above) and ask them what issues they noticed)
7. Commit them to your local repo (`git add .` and `git commit -m "Refactoring"`)
8. Push them up to your Github repo (`git push origin master`)
9. Submit a pull request in the Github interface (big button near the top when looking at your fork's repository page)
10. Repeat 6-9 adding extensions as time allows.

It's expected that you'll have at least one pull request submitted by 4PM today.

### Project Assignments

* Blair Anderson refactors the project written by Kyle Suss
* Paul Blackwell refactors the project written by James Denman
* Phil Battos refactors the project written by Bradley Sheehan
* Erin Drummond refactors the project written by Laura Steadman
* James Denman refactors the project written by Chelsea Komlo
* Jennifer Eliuk refactors the project written by Logan Sears
* Danny Garcia refactors the project written by Paul Blackwell
* Kareem Grant refactors the project written by Jennifer Eliuk
* Christopher Knight refactors the project written by Daniel Mee
* Chelsea Komlo refactors the project written by Josh Mejia
* John Maddux refactors the project written by Blair Anderson
* Aimee Maher refactors the project written by Jorge Tellez
* Josh Mejia refactors the project written by Phil Battos
* Daniel Mee refactors the project written by John Maddux
* Ron Rateau refactors the project written by Geoffrey Schorkopf
* Shane Rogers refactors the project written by Danny Garcia
* Laura Steadman refactors the project written by Ron Rateau
* Geoffrey Schorkopf refactors the project written by Aimee Maher
* Kyle Suss refactors the project written by Raphael Weiner
* Logan Sears refactors the project written by Erin Drummond
* Bradley Sheehan refactors the project written by Elaine Tai
* Elaine Tai refactors the project written by Kareem Grant
* Jorge Tellez refactors the project written by Shane Rogers
* Raphael Weiner refactors the project written by Christopher Knight

## Lightning Talk Check-Ins

If you're delivering a lightning talk tomorrow, please meet Jeff in the second classroom at 3:30 to review your current content/plan.
